## Use the latest 2.1 version of CircleCI pipeline process engine.
## See: https://circleci.com/docs/2.0/configuration-reference
#version: 2.1

## Use a package of configuration called an orb.
#orbs:
#  # Declare a dependency on the welcome-orb
#  welcome: circleci/welcome-orb@0.4.1

## Define a job to be invoked later in a workflow.
## See: https://circleci.com/docs/2.0/configuration-reference/#jobs
#jobs:
#  say-hello:
#    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#    docker:
#      - image: cimg/base:stable
#    # Add steps to the job
#    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#    steps:
#      - checkout
#      - run:
#          name: "Say hello"
#          command: "echo Hello, World!"

#  print_hello:
#    docker:
#      - image: circleci/node:13.8.0

#    steps:
#      - run:
#          name: "Print hello"
#          command: "echo hello"

#  print_world:
#    docker:
#      - image: circleci/node:13.8.0

#    steps:
#      - run:
#          name: "Print world"
#          command: "echo world"

## Invoke jobs via workflows
## See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#workflows:
#  say-hello-workflow:
#    jobs:
#      - say-hello 
#      - print_hello
#      - print_world:
#          requires: [print_hello]




#As the tutor did his own


# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

#printint ID from command inside jobs
commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

  print_pipeline_id2:
    description: "A simple command that prints Circle CI PipelineId"
    parameters:
      id:
        type: string
        default: "No Id"
    steps:
      - run: echo << parameters.id >>

# Use a package of configuration called an orb.


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  #save_hello_world_output:
  #   docker:
  #    - image: circleci/node:13.8.0

  #   steps:
  #    - run: echo "hello world" > ~/output.txt
  #    - persist_to_workspace:
  #        root: /~
  #        paths:
  #          - output.txt

  #print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0

  #   steps:
  #     - attach_workspace:
  #        at: /~
  #     - run: cat ~/output.txt
  my_job_get_from_command:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id

  my_job_get_from_command2:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id2:
          id: << pipeline.id >>



  print_hello:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - run: echo hello

  print_world:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - run: echo world

  print_my_name:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run: 
          name: "echo an env var that is part of our project"
          command:  |
            echo $MyName

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      #- save_hello_world_output
      #- print_output_file:
      #    requires:
      #      - save_hello_world_output
      - my_job_get_from_command
       - my_job_get_from_command2
      - print_hello
      - print_world:
          requires:
            - print_hello
      - print_my_name
     


